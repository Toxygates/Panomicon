<!DOCTYPE project [
  <!ENTITY common SYSTEM "../build_common.xml">
]>

<project name="Toxygates" default="compile" basedir="."
  xmlns:ivy="antlib:org.apache.ivy.ant">

  <property name="test-sources.dir" value="test" />

  &common;

  <property name="otgtool.root" value="../OTGTool" />
  
  <!-- Configure the path to the GWT SDK -->
  <property name="gwt.sdk" value="${env.GWT_SDK}" />

  <!-- Configure the path where the web application will be hosted for development purposes. 
    When you compile, classes and jars will be output inside this directory, but static resources must be copied manually once.
  -->
  <property name="wardir" value="/var/lib/tomcat9/webapps/panomicon" />

  <!-- Configure the URL prefix of the servlet container that will be used when running dev mode. -->
  <property name="dev.urlbase" value="http://localhost:8080/panomicon" />

  <target name="init">
  <property name="war.build.dir" value="${wardir}/WEB-INF/classes" />
    <property name="scala-library.jar" 
      value="${scala.home}/lib/scala-library.jar" />
    <property name="scala-compiler.jar" 
      value="${scala.home}/lib/scala-compiler.jar" /> 
    <property name="scala.reflect" 
      value="${scala.home}/lib/scala-reflect.jar"/>
    <property name="scala.xml"
    value="${scala.home}/lib/scala-xml_2.12-1.0.6.jar"/>
    <path id="jars.classpath">
      <fileset dir="mlib">
        <include name="**/*.jar" />
      </fileset>
      <fileset dir="${otgtool.root}/mlib">
        <include name="**/*.jar" />
      </fileset>
      <fileset dir="${otgtool.root}/lib/jar">
        <include name="**/*.jar" />
      </fileset>
      <fileset dir="${otgtool.root}/lib/bundle">
        <include name="**/*.jar" />
      </fileset>
    </path>

    <path id="build.classpath">
      <pathelement location="${scala-library.jar}" />
      <pathelement location="${war.build.dir}" />
      <pathelement location="${otgtool.root}/classes" />
      <path refid="jars.classpath" />

      <!-- for t.model.Model gwt.xml -->
      <pathelement location="${otgtool.root}/src/main/java" />
    </path>
    <taskdef resource="scala/tools/ant/antlib.xml">
      <classpath>
        <pathelement location="${scala-compiler.jar}" />
        <pathelement location="${scala-library.jar}" />
        <pathelement location="${scala.reflect}"/>
        <pathelement location="${scala.xml}"/>
      </classpath>
    </taskdef>
  </target>

  <path id="compile.classpath">
    <path refid="build.classpath" />
    <path refid="ivy.classpath" />
    <path refid="gwtpath" />
  </path>

  <path id="test.classpath">
    <path refid="compile.classpath" />
    <pathelement location="${war.build.dir}" />
    <pathelement location="${testbuild.dir}" />
    <pathelement location="${otgtool.root}/test-classes" />
  </path>

  <target name="classfiles" depends="init,retrieve">
    <ivy:cachepath pathid="ivy.classpath" />
    <mkdir dir="${war.build.dir}" />
    <scalac srcdir="${sources.dir}"
      destdir="${war.build.dir}"
      classpathref="compile.classpath"
      deprecation="on">
      <include name="**/*.scala" />
      <include name="**/*.java" />
    </scalac>
    <javac srcdir="${sources.dir}"
      destdir="${war.build.dir}"
      classpathref="compile.classpath">
      <include name="**/*.java" />
    </javac>

    <mkdir dir="${testbuild.dir}" />
    <scalac srcdir="${test-sources.dir}" destdir="${testbuild.dir}" classpathref="test.classpath"
      deprecation="on">
      <include name="**/*.scala" />
    </scalac>

    <!-- Set up WEB-INF/lib with jars -->
    <delete dir="${wardir}/WEB-INF/lib" failonerror="false" />
    <mkdir dir="${wardir}/WEB-INF/lib" />
    <copy  todir="${wardir}/WEB-INF/lib">
      <path refid="jars.classpath"/>

      <!-- The following three paths will be properly set up only after the compile, hence not included in jars.classpath -->
      <fileset dir="lib/jar"/>
      <fileset dir="lib/bundle"/>
      <fileset dir="mlib"/>
      <file file="${env.GWT_SDK}/gwt-servlet.jar"/>
    </copy>

    <!-- Set up WEB-INF/classes -->
    <copy  todir="${wardir}/WEB-INF/classes">
      <fileset dir="${otgtool.root}/classes"/>
    </copy>

  </target>

  <path id="gwtpath">
    <pathelement location="${gwt.sdk}/gwt-user.jar"/>
    <pathelement location="${gwt.sdk}/gwt-dev.jar"/>
    <pathelement location="${gwt.sdk}/validation-api-1.0.0.GA.jar"/>
    <pathelement location="${gwt.sdk}/validation-api-1.0.0.GA-sources.jar"/>
    <!-- Add any additional non-server libs (such as JUnit) here -->
  </path>

  <!-- Arguments to gwtc and devmode targets -->
  <property name="gwt.args" value="-style PRETTY -strict" />

  <target name="gwtc" depends="classfiles">
    <java failonerror="true" fork="true" classname="com.google.gwt.dev.Compiler" maxmemory="1g">
      <classpath>
        <pathelement location="src"/>
        <path refid="compile.classpath"/>
      </classpath>
      <arg line="-war"/>
      <arg value="${wardir}"/>
      <!-- Additional arguments like -style PRETTY or -logLevel DEBUG -->
      <arg line="${gwt.args}"/>
      <arg value="t.gwt.viewer.Toxygates"/>
      <arg value="t.gwt.admin.AdminConsole"/>
    </java>

  </target>

  <target name="compile" depends="gwtc" />

  <!-- with the -noserver flag, this will not start an embedded jetty instance 
  inside devmode. Instead, the application should be served from a servlet container like Tomcat. -->
  <target name="devmode" depends="classfiles" description="Run development mode">
    <java failonerror="true" fork="true" classname="com.google.gwt.dev.DevMode">
      <classpath>
        <pathelement location="src"/>
	<path refid="compile.classpath"/>
      </classpath>      
      <jvmarg value="-Xmx3g"/>
      <arg value="-noserver"/>
      <arg value="-bindAddress"/>
      <arg value="0.0.0.0"/>
      <arg value="-startupUrl"/>
      <arg value="${dev.urlbase}/toxygates.html"/>
      <arg value="-startupUrl"/>
      <arg value="${dev.urlbase}/admin.html"/>


      <arg value="t.gwt.viewer.Toxygates"/>
      <arg value="t.gwt.admin.AdminConsole"/>
    </java>
  </target>

  <target name="scalatra" depends="classfiles" description="Run Scalatra on Jetty">
    <echo>${toString:compile.classpath}</echo>
    <java failonerror="true" fork="true" classname="panomicon.ScalatraLauncher">
      <classpath>
        <path refid="compile.classpath"/>
      </classpath>
      <jvmarg value="-Xmx3g"/>
    </java>
  </target>

  <target name="clean" depends="init">
    <delete dir="${war.build.dir}" failonerror="false" />
    <delete dir="${testbuild.dir}" failonerror="false" />
  </target>

</project>

