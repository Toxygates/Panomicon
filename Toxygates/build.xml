<!DOCTYPE project [
  <!ENTITY common SYSTEM "../build_common.xml">
]>

<project name="Toxygates" default="compile" basedir="."
  xmlns:ivy="antlib:org.apache.ivy.ant">

  <property name="test-sources.dir" value="test" />

  &common;

  <property name="otgtool.root" value="../OTGTool" />
  
  <!-- Configure the path to the GWT SDK -->
  <property name="gwt.sdk" value="${env.GWT_SDK}" />

  <!-- Configure the path where the web application will be hosted for development purposes. 
    When you compile, classes and jars will be output inside this directory, but static resources must be copied manually once
    if not already there.
   A symlink can be set up from e.g. /var/lib/tomcat/webapps/panomicon to this war
  -->
  <property name="wardir" value="war" />
  <property name="war.build.dir" value="${wardir}/WEB-INF/classes" />

  <!-- Configure the URL prefix of the servlet container that will be used when running dev mode. -->
  <property name="dev.urlbase" value="http://localhost:8080/panomicon" />

  <!-- compile/runtime dependencies other than those from ivy -->
  <path id="manual.classpath">
    <fileset dir="${otgtool.root}/mlib"/>
    <file file="${gwt.sdk}/gwt-servlet.jar"/>
    <fileset dir="mlib"/>
  </path>

  <path id="compile.classpath">
    <pathelement location="${scala-library.jar}" />
    <pathelement location="${otgtool.root}/classes" />
    <path refid="manual.classpath" />

    <!-- for t.model.Model gwt.xml -->
    <pathelement location="${otgtool.root}/src/main/java" />

    <path refid="ivy.classpath" />
    <path refid="gwtpath" />
     <file file="${env.GWT_SDK}/gwt-servlet.jar"/>
  </path>

  <path id="test.classpath">
    <path refid="compile.classpath" />
    <pathelement location="${war.build.dir}" />
    <pathelement location="${testbuild.dir}" />
    <pathelement location="${otgtool.root}/test-classes" />
  </path>

  <!-- compile scala and java classes, and set up WEB-INF -->
  <target name="classfiles">
    <mkdir dir="${war.build.dir}" />
    <scalac srcdir="${sources.dir}"
      destdir="${war.build.dir}"
      classpathref="compile.classpath"
      deprecation="on">
      <include name="**/*.scala" />
      <include name="**/*.java" />
    </scalac>
    <javac srcdir="${sources.dir}"
      destdir="${war.build.dir}"
      classpathref="compile.classpath">
      <include name="**/*.java" />
    </javac>

    <mkdir dir="${testbuild.dir}" />
    <scalac srcdir="${test-sources.dir}" destdir="${testbuild.dir}" classpathref="test.classpath"
      deprecation="on">
      <include name="**/*.scala" />
    </scalac>

    <!-- Set up WEB-INF/lib with jars -->
    <delete dir="${wardir}/WEB-INF/lib" failonerror="false" />
    <mkdir dir="${wardir}/WEB-INF/lib" />
    <copy  todir="${wardir}/WEB-INF/lib">
      <path refid="manual.classpath"/>
    </copy>
    <ivy:retrieve pattern="${wardir}/WEB-INF/lib/[artifact]-[revision].[ext]" conf="runtime" type="bundle,jar"/>

    <!-- Set up WEB-INF/classes with additional classes from OTGTool -->
    <copy  todir="${wardir}/WEB-INF/classes">
      <fileset dir="${otgtool.root}/classes"/>
      <file file="log4j2-test.properties"/>
    </copy>

  </target>

  <!-- Classpath and source path for the gwt compiler and gwt devmode.
   This doesn't need the application's entire server classpath when we run devmode with an external container like tomcat.
   In fact, the entire classpath cannot be included as it currently contains some jars (asm) that conflict with gwt.
  -->
  <path id="gwtpath">
    <pathelement location="${gwt.sdk}/gwt-user.jar"/>
    <pathelement location="${gwt.sdk}/gwt-dev.jar"/>
    <pathelement location="${gwt.sdk}/validation-api-1.0.0.GA.jar"/>
    <pathelement location="${gwt.sdk}/validation-api-1.0.0.GA-sources.jar"/>

    <pathelement location="src"/>
    <pathelement location="${otgtool.root}/src/main/java" />
    <pathelement location="${otgtool.root}/classes" />
    <pathelement location="${war.build.dir}"/>
    <fileset dir="mlib"/>
  </path>

  <!-- Arguments to gwtc and devmode targets -->
  <property name="gwt.args" value="-style PRETTY -strict" />

  <!-- gwt compiler -->
  <target name="gwtc" depends="classfiles">
    <java failonerror="true" fork="true" classname="com.google.gwt.dev.Compiler" maxmemory="1g">
      <classpath>
        <path refid="gwtpath"/>
      </classpath>
      <arg line="-war"/>
      <arg value="${wardir}"/>
      <!-- Additional arguments like -style PRETTY or -logLevel DEBUG -->
      <arg line="${gwt.args}"/>
      <arg value="t.gwt.viewer.Toxygates"/>
      <arg value="t.gwt.admin.AdminConsole"/>
    </java>

  </target>

  <target name="compile" depends="gwtc" />

  <!-- run gwt devmode -->
  <!-- with the -noserver flag, this will not start an embedded jetty instance 
  inside devmode. Instead, the application should be served from a servlet container like Tomcat. -->
  <target name="devmode" depends="classfiles" description="Run development mode">
    <java failonerror="true" fork="true" classname="com.google.gwt.dev.DevMode">
      <classpath>
        <path refid="gwtpath"/>
      </classpath>      
      <jvmarg value="-Xmx3g"/>
      <arg value="-noserver"/>
      <arg value="-bindAddress"/>
      <arg value="0.0.0.0"/>
      <arg value="-startupUrl"/>
      <arg value="${dev.urlbase}/toxygates.html"/>
      <arg value="-startupUrl"/>
      <arg value="${dev.urlbase}/admin.html"/>


      <arg value="t.gwt.viewer.Toxygates"/>
      <arg value="t.gwt.admin.AdminConsole"/>
    </java>
  </target>

  <!-- Run scalatra server -->
  <target name="scalatra" depends="classfiles" description="Run Scalatra on Jetty">
    <echo>${toString:compile.classpath}</echo>
    <java failonerror="true" fork="true" classname="panomicon.ScalatraLauncher">
      <classpath>
        <path refid="compile.classpath"/>
      </classpath>
      <jvmarg value="-Xmx3g"/>
    </java>
  </target>

  <target name="clean">
    <delete dir="${war.build.dir}" failonerror="false" />
    <delete dir="${testbuild.dir}" failonerror="false" />
  </target>

</project>

